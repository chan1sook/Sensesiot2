<template>
  <sensesiot-base-container>
    <b-container class="mt-4" style="flex-grow: 1">
      <sensesiot-content-container>
        <h2 class="text-center mb-4">
          <font-awesome-icon :icon="['fas', 'shop']" fixed-width />
          Coin Shop
        </h2>
        <b-row>
          <b-col v-for="product of products" :key="product._id" md="6">
            <b-card class="d-flex flex-column items-center text-center mb-2">
              <h4 class="mb-2">{{ getProductName(product) }}</h4>
              <font-awesome-icon
                :icon="['fas', 'coins']"
                class="my-4"
                style="font-size: 3em"
                fixed-width
              />
              <div class="mb-1">
                <s
                  v-if="!isPriceEqual(product.originalPrice, product.price)"
                  class="mr-1"
                  style="font-size: 0.8em"
                >
                  {{ formatCurrency(product.originalPrice, product.unit) }}
                </s>
                <span>{{ formatCurrency(product.price, product.unit) }}</span>
              </div>
              <div>
                <b-button
                  v-b-modal.modal-coin-confirm
                  variant="success"
                  :disabled="!isLogin"
                  @click="selectProduct = product"
                >
                  Buy
                </b-button>
              </div>
            </b-card>
          </b-col>
        </b-row>
      </sensesiot-content-container>
    </b-container>
    <b-modal
      id="modal-coin-confirm"
      centered
      title="Confirm"
      no-stacking
      ok-variant="success"
      @ok="buyCoin"
    >
      <template v-if="selectProduct">
        <p class="my-2">
          Are you sure about buy <i>[{{ getProductName(product) }}]</i>
        </p>
        <p class="my-2">
          <b>Name:</b>
          <span>{{ getProductName(product) }}</span>
        </p>
        <p class="my-2">
          <b>Price:</b>
          <s
            v-if="
              !isPriceEqual(selectProduct.originalPrice, selectProduct.price)
            "
            class="mr-1"
            style="font-size: 0.8em"
          >
            {{
              formatCurrency(selectProduct.originalPrice, selectProduct.unit)
            }}
          </s>
          <span>
            {{ formatCurrency(selectProduct.price, selectProduct.unit) }}
          </span>
        </p>
      </template>
    </b-modal>
    <b-modal
      id="modal-coin-success"
      centered
      title="Success"
      no-stacking
      ok-only
    >
      <template v-if="selectProduct">
        <p class="my-2">You transaction {{ transactionId }} complete!</p>
        <p class="my-2">
          <b>Name:</b>
          <span>{{ getProductName(product) }}</span>
        </p>
        <p class="my-2">
          <b>Price:</b>
          <span>
            {{ formatCurrency(selectProduct.price, selectProduct.unit) }}
          </span>
        </p>
      </template>
    </b-modal>
    <b-modal id="modal-coin-cancel" centered title="Failed" no-stacking ok-only>
      <template v-if="selectProduct">
        <p class="my-2">You transaction {{ transactionId }} is cancel</p>
        <p class="my-2">
          <b>Name:</b>
          <span>{{ getProductName(product) }}</span>
        </p>
        <p class="my-2">
          <b>Price:</b>
          <span>
            {{ formatCurrency(selectProduct.price, selectProduct.unit) }}
          </span>
        </p>
      </template>
    </b-modal>
    <b-modal id="modal-coin-failed" centered title="Failed" no-stacking ok-only>
      <template v-if="selectProduct">
        <p class="my-2">
          You transaction {{ transactionId }} failed, please contact admin
        </p>
        <p class="my-2">
          <b>Name:</b>
          <span>{{ getProductName(product) }}</span>
        </p>
        <p class="my-2">
          <b>Price:</b>
          <span>
            {{ formatCurrency(selectProduct.price, selectProduct.unit) }}
          </span>
        </p>
      </template>
    </b-modal>
  </sensesiot-base-container>
</template>

<script>
import { formatCurrency, isPriceEqual } from '~/utils/price'

export default {
  name: 'ShopPage',
  middlewares: ['auth'],
  async asyncData({ $axios, error }) {
    try {
      const { products } = await $axios.$get('/api/shop/coins')
      return {
        products,
      }
    } catch (err) {
      error({
        statusCode: 500,
        message: "Can't get shop page",
      })
    }
  },
  data() {
    return {
      products: [],
      selectProduct: null,
      resultTransaction: null,
    }
  },
  computed: {
    role() {
      return this.$store.getters.role
    },
    isLogin() {
      return this.$store.getters.role !== 'guest'
    },
    transactionId() {
      return this.resultTransaction ? `(#${this.resultTransaction._id})` : ''
    },
  },
  methods: {
    isPriceEqual,
    formatCurrency,
    getProductName(product) {
      const numberStr = product.coins.toLocaleString()
      return `${numberStr} Coins`
    },
    async buyCoin(ev) {
      if (!this.selectProduct) {
        return
      }

      try {
        const { transaction } = await this.$axios.$post('/api/shop/buy', {
          productId: this.selectProduct._id,
        })
        this.resultTransaction = transaction
        await this.$store.dispatch('getUserData')
        this.$bvModal.show('modal-coin-success')
      } catch (err) {
        if (err.response) {
          console.error(err.response.data)
        } else {
          console.error(err)
        }

        this.$bvModal.show('modal-coin-failed')
      }
    },
  },
}
</script>
